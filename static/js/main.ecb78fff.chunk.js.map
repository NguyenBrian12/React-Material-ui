{"version":3,"sources":["components/navbar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","components/services/Services.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","title","ImageResults","state","open","currentImg","handleOpen","img","setState","handleClose","imageListContent","images","this","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","onClick","largeImageURL","color","src","alt","actions","label","primary","modal","onRequestClose","style","width","Component","Search","search","amount","onTextChange","e","val","target","value","name","searchText","axios","get","then","response","data","hits","catch","err","console","log","onAmountChange","index","onChange","floatingLabelText","fullWidth","primaryText","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecb78fff.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from 'material-ui/AppBar'\r\n\r\n const NavBar = () => <AppBar title=\"PixaBay Image Finder\"></AppBar>\r\n\r\n export default NavBar;\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {GridList, GridTile} from \"material-ui/GridList\";\r\nimport IconButton from \"material-ui/IconButton\";\r\nimport ZoomIn from \"material-ui/svg-icons/action/zoom-in\";\r\nimport FlatButton from \"material-ui/FlatButton\";\r\nimport Dialog from \"material-ui/Dialog\";\r\nclass ImageResults extends Component {\r\n    state={\r\n        open: false,\r\n        currentImg: \"\"\r\n    }\r\n\r\n    handleOpen = (img) => {\r\n        this.setState({open: true, currentImg: img})\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({open: false})\r\n    }\r\n\r\n    render() {\r\n        let imageListContent;\r\n        const { images } = this.props;\r\n        if(images){\r\n            imageListContent = (\r\n                <GridList cols={3}>\r\n                    {images.map(img => (\r\n                        <GridTile\r\n                            title={img.tags}\r\n                            key={img.id}\r\n                            subtitle={\r\n                                <span>\r\n                                    by <strong>{img.user}</strong>\r\n                                </span>\r\n                            }\r\n                            actionIcon={\r\n                              <IconButton onClick={()=> this.handleOpen(img.largeImageURL)}>\r\n                                 <ZoomIn color=\"white\" />\r\n                              </IconButton>\r\n                            }\r\n                        >\r\n                            <img src={img.largeImageURL} alt=\"\"></img>\r\n                        </GridTile>\r\n                    ))}\r\n                </GridList>\r\n            )\r\n        }else{\r\n            imageListContent = null;\r\n        }\r\n\r\n        const actions = [\r\n            <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\r\n        ]\r\n\r\n        return (\r\n            <div>\r\n                {imageListContent}\r\n                <Dialog \r\n                    actions ={actions}\r\n                    modal ={false}\r\n                    open={this.state.open}\r\n                    onRequestClose={this.handleClose}>\r\n                    <img src={this.state.currentImg} alt=\"\" style={{ width:\"100%\"}} />\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nImageResults.propTypes={\r\n    images: PropTypes.array.isRequired\r\n}\r\nexport default ImageResults","import React, { Component } from 'react'\r\nimport TextField from \"material-ui/TextField\";\r\nimport SelectField from \"material-ui/SelectField\";\r\nimport MenuItem from \"material-ui/MenuItem\";\r\nimport ImageResults from \"../image-results/ImageResults\";\r\nimport {GetPixabayImages} from \"../services/Services\";\r\nclass Search extends Component {\r\n    state={\r\n        search: \"\",\r\n        amount: 15,\r\n        images:[]\r\n    }\r\n\r\n    onTextChange = (e) => {\r\n        const val = e.target.value\r\n        this.setState({[e.target.name] : val}, () => {\r\n            if(val === \"\"){\r\n                this.setState({images:[]});\r\n            }else{\r\n                GetPixabayImages(this.state.searchText, this.state.amount).then((response) => {\r\n                    this.setState({images : response.data.hits})\r\n                }).catch(err => console.log(err));\r\n            }\r\n        });\r\n    }\r\n\r\n    onAmountChange = (e, index, value) => {\r\n        this.setState({amount : value})\r\n    }\r\n    render() {\r\n        console.log(this.state.images)\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    name=\"searchText\"\r\n                    value={this.state.searchText}\r\n                    onChange={this.onTextChange}\r\n                    floatingLabelText=\"Search For Images\"\r\n                    fullWidth={true}\r\n                />\r\n                <br/>\r\n                <SelectField\r\n                    name=\"amount\"\r\n                    floatingLabelText=\"Amount\"\r\n                    value={this.state.amount}\r\n                    onChange={this.onAmountChange}\r\n                >\r\n                    <MenuItem value={5} primaryText=\"5\" />\r\n                    <MenuItem value={10} primaryText=\"10\" />\r\n                    <MenuItem value={15} primaryText=\"15\" />\r\n                    <MenuItem value={30} primaryText=\"30\" />\r\n                    <MenuItem value={50} primaryText=\"50\" />\r\n                </SelectField>\r\n                {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />): null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import axios from \"axios\";\r\n\r\nexport function GetPixabayImages (search, amount){\r\n    return axios.get(\"https://pixabay.com/api/?key=\" + process.env.REACT_APP_API_KEY + \"&q=\" + search + \"&image_type=photo&per_page=\" + amount + \"&safeSearch=true\")\r\n}","import React, {Component} from 'react';\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\"\nimport './App.css';\nimport NavBar from \"./components/navbar/NavBar\";\nimport Search from \"./components/search/Search\";\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n          <NavBar />\n          <Search />\n        </div>\n      </MuiThemeProvider>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}